{
  "version": 3,
  "sources": ["../../three/examples/jsm/shaders/AfterimageShader.js", "../../three/examples/jsm/postprocessing/AfterimagePass.js"],
  "sourcesContent": ["/**\r\n * Afterimage shader\r\n * I created this effect inspired by a demo on codepen:\r\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\r\n */\r\n\r\nconst AfterimageShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'damp': { value: 0.96 },\r\n\t\t'tOld': { value: null },\r\n\t\t'tNew': { value: null }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform float damp;\r\n\r\n\t\tuniform sampler2D tOld;\r\n\t\tuniform sampler2D tNew;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvec4 when_gt( vec4 x, float y ) {\r\n\r\n\t\t\treturn max( sign( x - y ), 0.0 );\r\n\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec4 texelOld = texture2D( tOld, vUv );\r\n\t\t\tvec4 texelNew = texture2D( tNew, vUv );\r\n\r\n\t\t\ttexelOld *= damp * when_gt( texelOld, 0.1 );\r\n\r\n\t\t\tgl_FragColor = max(texelNew, texelOld);\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { AfterimageShader };\r\n", "import {\r\n\tHalfFloatType,\r\n\tMeshBasicMaterial,\r\n\tNearestFilter,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tWebGLRenderTarget\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\r\n\r\nclass AfterimagePass extends Pass {\r\n\r\n\tconstructor( damp = 0.96 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.shader = AfterimageShader;\r\n\r\n\t\tthis.uniforms = UniformsUtils.clone( this.shader.uniforms );\r\n\r\n\t\tthis.uniforms[ 'damp' ].value = damp;\r\n\r\n\t\tthis.textureComp = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\r\n\t\t\tmagFilter: NearestFilter,\r\n\t\t\ttype: HalfFloatType\r\n\t\t} );\r\n\r\n\t\tthis.textureOld = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\r\n\t\t\tmagFilter: NearestFilter,\r\n\t\t\ttype: HalfFloatType\r\n\t\t} );\r\n\r\n\t\tthis.compFsMaterial = new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: this.uniforms,\r\n\t\t\tvertexShader: this.shader.vertexShader,\r\n\t\t\tfragmentShader: this.shader.fragmentShader\r\n\r\n\t\t} );\r\n\r\n\t\tthis.compFsQuad = new FullScreenQuad( this.compFsMaterial );\r\n\r\n\t\tthis.copyFsMaterial = new MeshBasicMaterial();\r\n\t\tthis.copyFsQuad = new FullScreenQuad( this.copyFsMaterial );\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\r\n\r\n\t\tthis.uniforms[ 'tOld' ].value = this.textureOld.texture;\r\n\t\tthis.uniforms[ 'tNew' ].value = readBuffer.texture;\r\n\r\n\t\trenderer.setRenderTarget( this.textureComp );\r\n\t\tthis.compFsQuad.render( renderer );\r\n\r\n\t\tthis.copyFsQuad.material.map = this.textureComp.texture;\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis.copyFsQuad.render( renderer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.setRenderTarget( writeBuffer );\r\n\r\n\t\t\tif ( this.clear ) renderer.clear();\r\n\r\n\t\t\tthis.copyFsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t\t// Swap buffers.\r\n\t\tconst temp = this.textureOld;\r\n\t\tthis.textureOld = this.textureComp;\r\n\t\tthis.textureComp = temp;\r\n\t\t// Now textureOld contains the latest image, ready for the next frame.\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis.textureComp.setSize( width, height );\r\n\t\tthis.textureOld.setSize( width, height );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.textureComp.dispose();\r\n\t\tthis.textureOld.dispose();\r\n\r\n\t\tthis.compFsMaterial.dispose();\r\n\t\tthis.copyFsMaterial.dispose();\r\n\r\n\t\tthis.compFsQuad.dispose();\r\n\t\tthis.copyFsQuad.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { AfterimagePass };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;AAMA,IAAM,mBAAmB;AAAA,EAExB,UAAU;AAAA,IAET,QAAQ,EAAE,OAAO,KAAK;AAAA,IACtB,QAAQ,EAAE,OAAO,KAAK;AAAA,IACtB,QAAQ,EAAE,OAAO,KAAK;AAAA,EAEvB;AAAA,EAEA;AAAA;AAAA,IAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWxB;AAAA;AAAA,IAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0B3B;;;AC1CA,IAAM,iBAAN,cAA6B,KAAK;AAAA,EAEjC,YAAa,OAAO,MAAO;AAE1B,UAAM;AAEN,SAAK,SAAS;AAEd,SAAK,WAAW,cAAc,MAAO,KAAK,OAAO,QAAS;AAE1D,SAAK,SAAU,MAAO,EAAE,QAAQ;AAEhC,SAAK,cAAc,IAAI,kBAAmB,OAAO,YAAY,OAAO,aAAa;AAAA,MAChF,WAAW;AAAA,MACX,MAAM;AAAA,IACP,CAAE;AAEF,SAAK,aAAa,IAAI,kBAAmB,OAAO,YAAY,OAAO,aAAa;AAAA,MAC/E,WAAW;AAAA,MACX,MAAM;AAAA,IACP,CAAE;AAEF,SAAK,iBAAiB,IAAI,eAAgB;AAAA,MAEzC,UAAU,KAAK;AAAA,MACf,cAAc,KAAK,OAAO;AAAA,MAC1B,gBAAgB,KAAK,OAAO;AAAA,IAE7B,CAAE;AAEF,SAAK,aAAa,IAAI,eAAgB,KAAK,cAAe;AAE1D,SAAK,iBAAiB,IAAI,kBAAkB;AAC5C,SAAK,aAAa,IAAI,eAAgB,KAAK,cAAe;AAAA,EAE3D;AAAA,EAEA,OAAQ,UAAU,aAAa,YAAwC;AAEtE,SAAK,SAAU,MAAO,EAAE,QAAQ,KAAK,WAAW;AAChD,SAAK,SAAU,MAAO,EAAE,QAAQ,WAAW;AAE3C,aAAS,gBAAiB,KAAK,WAAY;AAC3C,SAAK,WAAW,OAAQ,QAAS;AAEjC,SAAK,WAAW,SAAS,MAAM,KAAK,YAAY;AAEhD,QAAK,KAAK,gBAAiB;AAE1B,eAAS,gBAAiB,IAAK;AAC/B,WAAK,WAAW,OAAQ,QAAS;AAAA,IAElC,OAAO;AAEN,eAAS,gBAAiB,WAAY;AAEtC,UAAK,KAAK;AAAQ,iBAAS,MAAM;AAEjC,WAAK,WAAW,OAAQ,QAAS;AAAA,IAElC;AAGA,UAAM,OAAO,KAAK;AAClB,SAAK,aAAa,KAAK;AACvB,SAAK,cAAc;AAAA,EAGpB;AAAA,EAEA,QAAS,OAAO,QAAS;AAExB,SAAK,YAAY,QAAS,OAAO,MAAO;AACxC,SAAK,WAAW,QAAS,OAAO,MAAO;AAAA,EAExC;AAAA,EAEA,UAAU;AAET,SAAK,YAAY,QAAQ;AACzB,SAAK,WAAW,QAAQ;AAExB,SAAK,eAAe,QAAQ;AAC5B,SAAK,eAAe,QAAQ;AAE5B,SAAK,WAAW,QAAQ;AACxB,SAAK,WAAW,QAAQ;AAAA,EAEzB;AAED;",
  "names": []
}
