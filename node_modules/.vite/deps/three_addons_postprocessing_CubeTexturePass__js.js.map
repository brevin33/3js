{
  "version": 3,
  "sources": ["../../three/examples/jsm/postprocessing/CubeTexturePass.js"],
  "sourcesContent": ["import {\r\n\tBackSide,\r\n\tBoxGeometry,\r\n\tMesh,\r\n\tPerspectiveCamera,\r\n\tScene,\r\n\tShaderLib,\r\n\tShaderMaterial,\r\n\tUniformsUtils\r\n} from 'three';\r\nimport { Pass } from './Pass.js';\r\n\r\nclass CubeTexturePass extends Pass {\r\n\r\n\tconstructor( camera, tCube, opacity = 1 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.needsSwap = false;\r\n\r\n\t\tthis.cubeShader = ShaderLib[ 'cube' ];\r\n\t\tthis.cubeMesh = new Mesh(\r\n\t\t\tnew BoxGeometry( 10, 10, 10 ),\r\n\t\t\tnew ShaderMaterial( {\r\n\t\t\t\tuniforms: UniformsUtils.clone( this.cubeShader.uniforms ),\r\n\t\t\t\tvertexShader: this.cubeShader.vertexShader,\r\n\t\t\t\tfragmentShader: this.cubeShader.fragmentShader,\r\n\t\t\t\tdepthTest: false,\r\n\t\t\t\tdepthWrite: false,\r\n\t\t\t\tside: BackSide\r\n\t\t\t} )\r\n\t\t);\r\n\r\n\t\tObject.defineProperty( this.cubeMesh.material, 'envMap', {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.uniforms.tCube.value;\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\tthis.tCube = tCube;\r\n\t\tthis.opacity = opacity;\r\n\r\n\t\tthis.cubeScene = new Scene();\r\n\t\tthis.cubeCamera = new PerspectiveCamera();\r\n\t\tthis.cubeScene.add( this.cubeMesh );\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\r\n\r\n\t\tconst oldAutoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tthis.cubeCamera.projectionMatrix.copy( this.camera.projectionMatrix );\r\n\t\tthis.cubeCamera.quaternion.setFromRotationMatrix( this.camera.matrixWorld );\r\n\r\n\t\tthis.cubeMesh.material.uniforms.tCube.value = this.tCube;\r\n\t\tthis.cubeMesh.material.uniforms.tFlip.value = ( this.tCube.isCubeTexture && this.tCube.isRenderTargetTexture === false ) ? - 1 : 1;\r\n\t\tthis.cubeMesh.material.uniforms.opacity.value = this.opacity;\r\n\t\tthis.cubeMesh.material.transparent = ( this.opacity < 1.0 );\r\n\r\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\r\n\t\tif ( this.clear ) renderer.clear();\r\n\t\trenderer.render( this.cubeScene, this.cubeCamera );\r\n\r\n\t\trenderer.autoClear = oldAutoClear;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.cubeMesh.geometry.dispose();\r\n\t\tthis.cubeMesh.material.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CubeTexturePass };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAYA,IAAM,kBAAN,cAA8B,KAAK;AAAA,EAElC,YAAa,QAAQ,OAAO,UAAU,GAAI;AAEzC,UAAM;AAEN,SAAK,SAAS;AAEd,SAAK,YAAY;AAEjB,SAAK,aAAa,UAAW,MAAO;AACpC,SAAK,WAAW,IAAI;AAAA,MACnB,IAAI,YAAa,IAAI,IAAI,EAAG;AAAA,MAC5B,IAAI,eAAgB;AAAA,QACnB,UAAU,cAAc,MAAO,KAAK,WAAW,QAAS;AAAA,QACxD,cAAc,KAAK,WAAW;AAAA,QAC9B,gBAAgB,KAAK,WAAW;AAAA,QAChC,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,MAAM;AAAA,MACP,CAAE;AAAA,IACH;AAEA,WAAO,eAAgB,KAAK,SAAS,UAAU,UAAU;AAAA,MAExD,KAAK,WAAY;AAEhB,eAAO,KAAK,SAAS,MAAM;AAAA,MAE5B;AAAA,IAED,CAAE;AAEF,SAAK,QAAQ;AACb,SAAK,UAAU;AAEf,SAAK,YAAY,IAAI,MAAM;AAC3B,SAAK,aAAa,IAAI,kBAAkB;AACxC,SAAK,UAAU,IAAK,KAAK,QAAS;AAAA,EAEnC;AAAA,EAEA,OAAQ,UAAU,aAAa,YAAwC;AAEtE,UAAM,eAAe,SAAS;AAC9B,aAAS,YAAY;AAErB,SAAK,WAAW,iBAAiB,KAAM,KAAK,OAAO,gBAAiB;AACpE,SAAK,WAAW,WAAW,sBAAuB,KAAK,OAAO,WAAY;AAE1E,SAAK,SAAS,SAAS,SAAS,MAAM,QAAQ,KAAK;AACnD,SAAK,SAAS,SAAS,SAAS,MAAM,QAAU,KAAK,MAAM,iBAAiB,KAAK,MAAM,0BAA0B,QAAU,KAAM;AACjI,SAAK,SAAS,SAAS,SAAS,QAAQ,QAAQ,KAAK;AACrD,SAAK,SAAS,SAAS,cAAgB,KAAK,UAAU;AAEtD,aAAS,gBAAiB,KAAK,iBAAiB,OAAO,UAAW;AAClE,QAAK,KAAK;AAAQ,eAAS,MAAM;AACjC,aAAS,OAAQ,KAAK,WAAW,KAAK,UAAW;AAEjD,aAAS,YAAY;AAAA,EAEtB;AAAA,EAEA,UAAU;AAET,SAAK,SAAS,SAAS,QAAQ;AAC/B,SAAK,SAAS,SAAS,QAAQ;AAAA,EAEhC;AAED;",
  "names": []
}
